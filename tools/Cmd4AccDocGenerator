#!/opt/homebrew/bin/node

// Cmd4 Constants and Settings
//const constants = require( "../cmd4Constants" );
//const settings = require( "../cmd4Settings" );

// Required to initialize CMD4 Accessory & Device lookup tables.
let HomebridgeAPI = require( "../node_modules/homebridge/lib/api" ).HomebridgeAPI;
let _api = new HomebridgeAPI( ); // object we feed to Plugins

// These would be the uninitialized values.
let ACC_DATA = require('../lib/CMD4_ACC_TYPE_ENUM');

// Init the library for all to use
let CMD4_ACC_TYPE_ENUM = ACC_DATA.init( _api.hap.Characteristic );

// File System utilities
let fs = require( "fs" );

let CMD4_ACC_DOC_FILE_PATH = "./docs/";
let AUTO_GENERATED_SUB_PATH = "autoGenerated/";
let CMD4_ACC_DOC_FILE = "CMD4_AccessoryDescriptions.html";

// The fid of the main document.
var fid;

function openHTMLDocument_CreatingFid( )
{
   let file = CMD4_ACC_DOC_FILE_PATH +
              AUTO_GENERATED_SUB_PATH +
              CMD4_ACC_DOC_FILE;

   // Open the Main file for writing
   fid = fs.createWriteStream( file,
          { flags: "w" // Open for write
        });

   fid.on("error", ( ) =>
   {
      console.log(`error fs.creatingWriteStream: ${ file }` );
      process.exit( 666 );
   });
}

function startHTMLDocument_AndHead ()
{
   fid.write(
`<!DOCTYPE HTML>
<HTML LANG="en">
<HEAD>
<META CHARSET="utf-8">
<META NAME="viewport" CONTENT="width=device-width, initial-scale=1">
<META NAME="robots" CONTENT="index,follow">
<META NAME="Description" CONTENT="CMD4 Characteristics.">
<META PROPERTY="og:url" CONTENT="https://github.com/ztalbot2000/homebridge-cmd4/docs/${ AUTO_GENERATED_SUB_PATH }${ CMD4_ACC_DOC_FILE }">

<TITLE>CMD4 Characteristics</TITLE>
` );
}

function startLeftSideNav_WithinHead( )
{
   fid.write(
`<META NAME="viewport" CONTENT="width=device-width, initial-scale=1">
<STYLE>
BODY {
   font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;
   font-size: 1rem;
   font-weight: 400;
   line-height: 1.5;
   color: #252930;
   text-align: left;
   background-color: #fff;
}

.sidenav {
  WIDTH: 130px;
  POSITION: fixed;
  Z-INDEX: 1;
  TOP: 20px;
  LEFT: 10px;
  BACKGROUND: #eee;
  OVERFLOW-X: hidden;
  PADDING: 8px 0;
  OVERFLOW-Y: auto;
  max-height: calc( 100vh - 9rem);
}

.sidenav a {
  PADDING: 6px 8px 6px 16px;
  TEXT-DECORATION: none;
  FONT: 10.5px Poppins;
  COLOR: #4b5465;
  -webkit-text-stroke: #4b546;
  DISPLAY: block;
}

.sidenav a:hover {
  COLOR: #064579;
}

.main {
  MARGIN-LEFT: 140px; // Same width as the sidebar + left position in px
  FONT-SIZE: 28px; // Increased text to enable scrolling
  PADDING: 0px 10px;
}

h1 {
   FONT-SIZE: 2.5rem;
   padding-top: 4rem;
}
h2 {
   FONT-SIZE: 1.5rem;
}
h1, h2, h3, h4, h5 {
  COLOR: #252930;
  FONT-WEIGHT: 600;
}

table {
   display: table;
   border-collapse: collapse;
   -webkit-border-horizontal-spacing: 2px;
   -webkit-border-vertical-spacing: 2px;
   border-top-color: gray;
   width: 100%;
   margin-bottom: 1rem;
}

td {
   padding: .75rem;
   vertical-align: top;
   border-top: 1px solid #e7e9ed;
}

tr:nth-child(even) { background-color: #f2f2f2 }

note {
   FONT-STYLE: italic;
   FONT-SIZE: 1rem;
   COLOR: #5d6778;
   PADDING: 2rem;
}

h1, h2, h3, h4, h5, note {
   FONT-FAMILY: Poppins,sans-serif;
   MARGIN-TOP: 0;
   MARGIN-BOTTOM: .5rem;
   font-weight: 500;
   line-height: 1.2;
}

* {
   box-sizing: border-box;
}

@media screen and (max-height: 450px) {
  .sidenav {PADDING-TOP: 15px;}
  .sidenav a {FONT-SIZE: 18px;}
}
</STYLE>
` );
}
function endHead( )
{
   fid.write(
`</HEAD>
` );
}

function startMainBody ()
{
   fid.write(
`<BODY>

` );
}

function startDivSideNav_WithinBody( )
{
   fid.write(
`<div class="sidenav">
` );
}


function addCharacteristicToLeftSideNavDiv_WithinBody( characteristic )
{
   fid.write(
`   <a href="#${ characteristic }">${ characteristic }</a>
`
   );
}

function endLeftSideNavDiv_WithinBody( )
{
   fid.write(
`</DIV>
` );
}

function startMainDiv_WithinBody( )
{
   fid.write(
`<div class="main">
   <h2>CMD4 Characteristic Properties</h2>
   <p>This auto generated document replaces the hard coded, impossible to maintain definitions in what was the State.js script and other locations.</p>
` );

}


function addCharacteristicContent_WithinBody(acc_type_enum, characteristic )
{
   let definition = CMD4_ACC_TYPE_ENUM.properties[ acc_type_enum ];
   let props = CMD4_ACC_TYPE_ENUM.properties[ acc_type_enum ].props;
   // Start Div
   fid.write(
`   <div>
      <a name="${ characteristic }"></a>
      <header><h1>${ characteristic }</h1></header>
      <h3>Properties</h3>
      <table>
         <tr><TD> Type: </TD><TD> ${characteristic }</TD></tr>
` );
   if ( definition.UUID )
      fid.write(
`         <tr><TD> UUID: </TD><TD> ${definition.UUID }</TD></tr>
` );
   if ( props.format )
      fid.write(
`         <tr><TD> Format: </TD><TD> ${ props.format }</TD></tr>
` );
   if ( props.unit )
         fid.write(
`         <tr><TD> Unit: </TD><TD>  ${ props.unit }</TD></tr>
` );
   if ( props.minValue )
      fid.write(
`         <tr><TD> Min Value: </TD><TD>  ${ props.minValue }</TD></tr>
` );
   if ( props.maxValue )
      fid.write(
`         <tr><TD> Max Value: </TD><TD>  ${ props.maxValue }</TD></tr>
` );
   if ( props.minStep )
      fid.write(
`         <tr><TD> Min Step: </TD><TD>  ${ props.minStep }</TD></tr>
` );
   if ( props.perms )
   {
      let output = "";
      let comma = "";
      props.perms.forEach( ( perm ) =>
      {
         switch( perm )
         {
            case "pr":
               output = output + comma + "Paired Read";
               commaNeeded = true;
               break;
            case "pw":
               output = output + comma + "Paired Write";
               commaNeeded = true;
               break;
            case "ev":
               output = output + comma + "Events";
               commaNeeded = true;
               break;
            case "tw":
               output = output + comma + "Timed Write";
               commaNeeded = true;
               break;
            case "wr":
               output = output + comma + "Write Response";
               commaNeeded = true;
               break;
            default:
               console.log( "Unknown perm: %s", perm );
               process.exit(333);
         }
         comma = ", ";
      });
      fid.write(
`         <tr><TD> Perms: </TD><TD>  ${ output }</TD></tr>
` );
   }
   fid.write(
`      </table>
` );
   // Constants definition Table
   let defs = Object.keys( definition.validValues );
   if ( defs.length > 0 )
   {
      fid.write(
`      <h3>Constants</h3>
       <table>
          <TD> Value </TD><TD> String </TD>
` );
      defs.forEach( ( def ) =>
      {
         fid.write(
`         <tr><TD> ${ definition.validValues[ def ] } </TD><TD> "${ def }" </TD></tr>
` );
      });
      fid.write(
`     </table>
` );
   }

   // Verify Chsracteristic Notes
   let verify = definition.verifyCharacteristic;
   if ( verify )
   {
      fid.write(
`       <h4>Note:</h4>
       <note>Setting this characteristic will automstically trigger a "Get" of the characteristic: <a href="#${ verify.name }">${ verify.name }</a></note>
` );
   }


   // Closing DIV of Characteristic
      fid.write(
`   </DIV>
` );
}
function endMainDiv_WithinBody( )
{
   fid.write(
`</DIV>
` );
}

function endMainBody ()
{
   fid.write(
`</BODY>
` );
}

function endHTMLDocument_ClosingFid()
{
   fid.write(
`</HTML>` );
   fid.close( );
}

openHTMLDocument_CreatingFid( );

startHTMLDocument_AndHead( );

//
// Create the left Side Nav contents
//
startLeftSideNav_WithinHead( );

endHead( );

startMainBody( );


// Add  the characteristics to the left Side Navigator within Body
startDivSideNav_WithinBody( );
for ( let index=0; index < CMD4_ACC_TYPE_ENUM.EOL; index ++)
{
   let characteristic = CMD4_ACC_TYPE_ENUM.properties[ index ].type;

   addCharacteristicToLeftSideNavDiv_WithinBody( characteristic );
}
endLeftSideNavDiv_WithinBody( );


//
// Add the characteristic content within the HTML body
//
startMainDiv_WithinBody( );
for ( let index=0; index < CMD4_ACC_TYPE_ENUM.EOL; index ++)
{
   let characteristic = CMD4_ACC_TYPE_ENUM.properties[ index ].type;

   addCharacteristicContent_WithinBody( index, characteristic );

}
endMainDiv_WithinBody( );

// End main body
endMainBody( );

endHTMLDocument_ClosingFid( );
