#!/opt/homebrew/bin/node

// Note:
// Must read https://docs.github.com/en/rest/reference/markdown#render-an-arbitrary-markdown-document
// https://gist.github.com
//
// Good Learning sites:
// https://www.w3schools.com/jquery/jquery_get_started.asp
// https://www.w3schools.com/howto/howto_css_sidebar_icons.asp


//             _______________________________________
//            |                 Margin                |
//            |   _________________________________   |
//            |  |              Border             |  |
//            |  |   ___________________________   |  |
//            |  |  |           Padding         |  |  |
//            |  |  |   _____________________   |  |  |
//            |  |  |  |                     |  |  |  |
//            |  |  |  |        Content      |  |  |  |
//            |  |  |  |_____________________|  |  |  |
//            |  |  |                           |  |  |
//            |  |  |___________________________|  |  |
//            |  |                                 |  |
//            |  |_________________________________|  |
//            |                                       |
//            |_______________________________________|



//    _____________________________________________________
//   | Header - Fixed-Top
//   |  ________________________________________________
//   | | container - fluid
//   | | ____________________________________________
//   | || Logo
//   | ||____________________________________________
//   | || Search
//   | ||____________________________________________
//   | |________________________________________________
//   |_____________________________________________________
//   | Body
//   |    ______________________________________________
//   |   | SideNav
//   |   |
//   |   |______________________________________________
//   |   | Main

// Cmd4 Constants and Settings
const constants = require( "../cmd4Constants" );
//const settings = require( "../cmd4Settings" );

// For changing validValue Constants to Values and back again
var { transposeConstantToValidValue,
      transposeValueToValidConstant
    } = require( "../utils/transposeCMD4Props" );

// Required to initialize CMD4 Accessory & Device lookup tables.
let HomebridgeAPI = require( "../node_modules/homebridge/lib/api" ).HomebridgeAPI;
let _api = new HomebridgeAPI( ); // object we feed to Plugins

var logger_1 = require("../node_modules/homebridge/lib/logger");
Object.defineProperty(exports, "LogLevel", { enumerable: true, get: function () { return logger_1.LogLevel; } });
const log = logger_1.Logger.internal;


// These would be the uninitialized values.
let ACC_DATA = require('../lib/CMD4_ACC_TYPE_ENUM');
let DEVICE_DATA = require('../lib/CMD4_DEVICE_TYPE_ENUM');

// Init the library for all to use
let CMD4_ACC_TYPE_ENUM = ACC_DATA.init( _api.hap.Characteristic );
let CMD4_DEVICE_TYPE_ENUM = DEVICE_DATA.init( CMD4_ACC_TYPE_ENUM, _api.hap.Service, _api.hap.Characteristic, _api.hap.Categories );
let Characteristic = _api.hap.Characteristic;



// File System utilities
let fs = require( "fs" );

let CMD4_DOC_FILE_PATH = "./docs/";
let AUTO_GENERATED_SUB_PATH = "autoGenerated/";
let CMD4_ACC_DOC_FILE = "CMD4_AccessoryDescriptions.html";

// The fid of the document.
var fid;

var divLevel=0;
const INDENT = 3;

function createHTMLCmd4AccDocument( )
{
   let file = CMD4_DOC_FILE_PATH +
              AUTO_GENERATED_SUB_PATH +
              CMD4_ACC_DOC_FILE;

   // Open the document for writing
   fid = fs.createWriteStream( file,
          { flags: "w" // Open for write
        });

   fid.on("error", ( ) =>
   {
      console.log(`error fs.creatingWriteStream: ${ file }` );
      process.exit( 666 );
   });

   startHTML_AndHead( );

   addLeftSideNav_WithinHead ( );
   endHead( );

   addBody( );

   wfs( `</HTML>\n` );

   fid.close( );

}

function startHTML_AndHead ()
{
   wfs(
`<!DOCTYPE HTML>
<HTML LANG="en">
<HEAD>
<META CHARSET="utf-8">
<META NAME="viewport" CONTENT="width=device-width, initial-scale=1">
<!-- Needed for unicode fa-caret-down -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<META NAME="robots" CONTENT="index,follow">
<META NAME="Description" CONTENT="CMD4 Characteristics.">
<META PROPERTY="og:url" CONTENT="https://github.com/ztalbot2000/homebridge-cmd4/docs/${ AUTO_GENERATED_SUB_PATH }${ CMD4_ACC_DOC_FILE }">

<TITLE>CMD4 Devices</TITLE>\n` );

}

function addLeftSideNav_WithinHead( )
{
   wfs(
`<META NAME="viewport" CONTENT="width=device-width, initial-scale=1">
<STYLE>
BODY {
   font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;
   font-size: 1rem;
   font-weight: 400;
   line-height: 1.5;
   color: #252930;          /* blackish */
   text-align: left;
   background-color: white;
}

.fixed-bottom, .fixed-top {
   POSITION: fixed;
   LEFT: 0;
   z-index: 1030;
   background-color: white;
}
.fixed-top {
   TOP: 0;
}

.header {
   /* The header div goes all across the top */
   WIDTH: 100%;
   box-shadow: 0 1px 4px 0 rgba(0,0,0,.1);
}

.position-relative {
   position: relative;
}

.float-left {
   float: left;
}

.container-fluid {
   width: 100%;
   padding-right:15px;
   padding-left:15px;
   margin-right:auto;
   margin-left:auto;
}

.flex {
   display: flex;
}

.align-items-center {
   align-items: center;
}


.site-logo {
  box-shadow: 0 1px 4px 0 rgba(0,0,0,.1);
  BACKGROUND: white;
  display: inline-block;
}
.site-text {
  BACKGROUND: white;
  position: relative;
  display: inline-block;
  transform: translate( 0, 25% );
}

.nav-link:before {
   background-color: #fbf5ff;
   content: " ";
   display: inline-block;
   height: inherit;
   left: 0;
   margin-top: -.5rem;
   position: absolute;
   width: 3px;
   height: 100%;
   border-radius: 1rem;
}

/* Fixed sidenav */
.sidenav
{
  WIDTH: 130px;
  POSITION: fixed;
  Z-INDEX: 1;
  MARGIN-LEFT: 10px;
  /* Must be below Logo */
  MARGIN-TOP: 50px;
  BACKGROUND: #eee;
  OVERFLOW-X: hidden;
  OVERFLOW-Y: auto;
  max-height: calc( 100vh - 9rem);
}

/* Style the sidenav links and the dropdown button */
.sidenav a, .dropdown-btn, .accordion {
  PADDING: 6px 8px 6px 16px;  /* Top, Right, Bottom,Left */
  TEXT-DECORATION: none;
  FONT: 10.5px Poppins;
  COLOR: #4b5465;           /* Blueish Gray */
  DISPLAY: block;
  -webkit-text-stroke: #4b546;
  TEXT-ALIGN: left;
  CURSOR: pointer;
  OUTLINE: none;
  BACKGROUND: none;
  /* Border around button */
  BORDER: none;
}

/* On mouse-over */
.sidenav a:hover, .dropdown-btn: hover, .accordion: hover
{
  COLOR: #064579;   /* darker blue */
}

.accordion
{
  transition: 0.4s;
}

/* accordion type divs */
.panel {
  padding: 0 0px;
  display: none;
  background-color: white;
  overflow: hidden;
}

.main {
  MARGIN-LEFT: 148px; /* Same width as the sidebar + left position in px */
  PADDING: 55px 10px; /* Top, Right, Bottom, Left */
}

h1 {
   FONT-SIZE: 2.5rem;
   padding-top: 4rem;
}
h2 {
   FONT-SIZE: 1.5rem;
}
h1, h2, h3, h4, h5 {
  COLOR: #252930;
  FONT-WEIGHT: 600;
}

table {
   display: table;
   border-collapse: collapse;
   -webkit-border-horizontal-spacing: 2px;
   -webkit-border-vertical-spacing: 2px;
   width: 100%;
   margin-bottom: 1rem;
}

th {
   FONT-WEIGHT: bold;
   border: 1px solid #e7e9ed;
   text-align: center;
}

td {
   padding: .75rem;
   vertical-align: top;
   border-top: 1px solid #e7e9ed;
   FONT-WEIGHT: normal;
}

tr:nth-child(even) { background-color: #f2f2f2 }  /* off white */

note {
   FONT-STYLE: italic;
   FONT-SIZE: 1rem;
   COLOR: #5d6778;   /* blue-ish gray */
   PADDING: 2rem;
}

h1, h2, h3, h4, h5, note, p {
   FONT-FAMILY: Poppins,sans-serif;
   MARGIN-TOP: 0;
   MARGIN-BOTTOM: .5rem;
   font-weight: 500;
   line-height: 1.2;
}

block-warning a {
   color: #d09c13;     /* Orange-ish */
}

/* Add an active class to the active dropdown button */
.active, .accordion: hover {

  /* The background color of the active buttons */
  background-color: #ccc;   /* light gray */

  /* The width of item is the width of the div */
  /* Otherwise buttons appear half blocked */
  width: 100%;
}

/* Dropdown container (hidden by default).
   Optional: add a lighter background color and some
   left padding to change the design of the dropdown content */
.dropdown-container {
  display: none;
  background-color: #262626;   /* light black */
  padding-left: 8px;
}

/* Optional: Style the caret down icon */
.fa-caret-down {
  float: right;
  padding-right: 8px;
}

* {
   box-sizing: border-box;
}

/* Some media queries for responsiveness */
@media screen and (max-height: 450px) {
  .sidenav {PADDING-TOP: 15px;}
  .sidenav a {FONT-SIZE: 12px;}  /* height of items in dropdown */
}
</STYLE>\n` );

}
function endHead( )
{
   wfs( `</HEAD>\n` );
}

function addBody ()
{
   wfs( `<BODY>\n` );

   addFixedHeader_WithinBody();

   addContentDiv_WithinBody( );

   addAccordionScript_WithinEndOfBody();
   addDropDownScript_WithinEndOfBody();

   wfs( `</BODY>\n` );
}

function addFluidHeader_WithinFixedHeader()
{
   wf( "+", `<div class="container-fluid position-relative">\n` );

      addLogoDiv_WithinFluidHeader( );

   endDiv( "container-fluid" );
}
function addFixedHeader_WithinBody()
{
   wf( "+", `<HEADER class="header fixed-top">\n` );

      addFluidHeader_WithinFixedHeader();

   wf( "-", `</HEADER>\n` );
}


function addContentDiv_WithinBody( )
{
   wf( "+", `<div class="content">\n` );

   addSideNav_WithinContentDiv( )

   addDevicePages_WithinContentDiv( )

   addAccPages_WithinContentDiv( );

   addCmd4DirectivePages_WithinContentDiv( );

   addCmd4AccessoryDirectivePages_WithinContentDiv();

   endDiv( "content" );

}

function addLogoDiv_WithinFluidHeader( )
{
   wf( "+", `<div class="site-logo">\n` );

      wfs( `<img class="float-left" src="assets/images/Cmd4_icon.svg" width="40px" alt="logo">\n` );

      wf( "+", `<div class="site-text">\n` );
        wfs(`Cmd4\n`);
      endDiv( "site-text" );

   endDiv( "site-logo" );
}
// For this to work, it must be at the end of the Body
function addAccordionScript_WithinEndOfBody( )
{
   wf( "+", `<script>\n` );
   wfs(
`var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
` );
   wf( "-", `</script>\n` );
}

// For this to work, it must be at the end of the Body
function addDropDownScript_WithinEndOfBody( )
{
   wf( "+", `<script>\n` );
   wfs( `
// Loop through all dropdown buttons to toggle between hiding and
// showing its dropdown content - This allows the user to have
// multiple dropdowns without any conflict

var dropdown = document.getElementsByClassName("dropdown-btn");

for (let i = 0; i < dropdown.length; i++)
{
  dropdown[i].addEventListener("click", function()
  {
     this.classList.toggle("active");
     var dropdownContent = this.nextElementSibling;
     if (dropdownContent.style.display === "block")
     {
        dropdownContent.style.display = "none";
     } else {
        dropdownContent.style.display = "block";
     }
  });
}\n` );

   wf( "-", `</script>\n` );

}

function addSideNav_WithinContentDiv( )
{
   wf( "+", `<div class="sidenav">\n` );

      addSideNavIntroduction_WithinSideNav ();

      addSideNavDevices_WithinSideNav( );

      addSideNavCharacteristics_WithinSideNav( );

      addSideNavCmd4Directives_WithinSideNav( );

      addSideNavCmd4AccessoryDirectives_WithinSideNav( );

   endDiv( "sidenav" );
}
function addSideNavDevices_WithinSideNav( )
{

   // Accordion button for Devices
   wf( "+", `<button class="accordion">Devices\n` );
      wfs( `<i class="fa fa-caret-down"></i>\n` );
   wf( "-", `</button>\n` );


   wf( "+", `<div class="panel">\n` );

      for ( let index=0; index < CMD4_DEVICE_TYPE_ENUM.EOL; index ++)
      {
         let deviceName = CMD4_DEVICE_TYPE_ENUM.properties[ index ].deviceName;

         wfs( `<a href="#${ deviceName }">${ deviceName }</a>\n` );
      }

   endDiv( "panel" );
}
function addSideNavIntroduction_WithinSideNav ()
{
      // I Hope this works on Github!
      //wfs( `<a href="../../README.md">Cmd4 README</a>\n` );
}
function addSideNavCharacteristics_WithinSideNav( )
{
   // Accordion button for Characteristics
   wf( "+", `<button class="accordion">Characteristics\n` );
      wfs( `<i class="fa fa-caret-down"></i>\n` );
   wf( "-", `</button>\n` );


   wf( "+", `<div class="panel">\n` );
      for ( let index=0; index < CMD4_ACC_TYPE_ENUM.EOL; index ++)
      {
         let characteristic = CMD4_ACC_TYPE_ENUM.properties[ index ].type;

         wfs( `<a href="#${ characteristic }">${ characteristic }</a>\n` );
      }
   endDiv( "panel" );

}
function addSideNavCmd4Directives_WithinSideNav( )
{
   // Accordion button for Characteristics
   wf( "+", `<button class="accordion">Cmd4 Directives\n` );
      wfs( `<i class="fa fa-caret-down"></i>\n` );
   wf( "-", `</button>\n` );

   wf( "+", `<div class="panel">\n` );
      wfs( `<a href="#${ constants.OUTPUTCONSTANTS }_D">${ constants.OUTPUTCONSTANTS }</a>\n` );
      wfs( `<a href="#${ constants.RESTART_RECOVER_l }_D">${ constants.RESTART_RECOVER_l }</a>\n` );
   endDiv( "panel" );

}


function addSideNavCmd4AccessoryDirectives_WithinSideNav( )
{
   // Accordion button for Characteristics
   wf( "+", `<button class="accordion">Cmd4 Accessory Directives\n` );
      wfs( `<i class="fa fa-caret-down"></i>\n` );
   wf( "-", `</button>\n` );


   wf( "+", `<div class="panel">\n` );
      wfs( `<a href="#${ constants.FETCH }">${ constants.FETCH }</a>\n` );
      wfs( `<a href="#${ constants.FAKEGATO }">${ constants.FAKEGATO }</a>\n` );
      wfs( `<a href="#${ constants.PUBLISHEXTERNALLY }">${ constants.PUBLISHEXTERNALLY }</a>\n` );
      wfs( `<a href="#${ constants.STATE_CMD_PREFIX }">${ constants.STATE_CMD_PREFIX }</a>\n` );
      wfs( `<a href="#${ constants.STATE_CMD_SUFFIX }">${ constants.STATE_CMD_SUFFIX }</a>\n` );
      wfs( `<a href="#${ constants.STATE_CMD }">${ constants.STATE_CMD }</a>\n` );
      wfs( `<a href="#${ constants.POLLING }">${ constants.POLLING }</a>\n` );
      wfs( `<a href="#${ constants.INTERVAL }">${ constants.INTERVAL }</a>\n` );
      wfs( `<a href="#${ constants.STATECHANGERESPONSETIME }">${ constants.STATECHANGERESPONSETIME }</a>\n` );
      wfs( `<a href="#${ constants.LINKEDTYPES }">${ constants.LINKEDTYPES }</a>\n` );
      wfs( `<a href="#${ constants.OUTPUTCONSTANTS }">${ constants.OUTPUTCONSTANTS }</a>\n` );
   endDiv( "panel" );

}

function addDevicePages_WithinContentDiv( )
{
   wf( "+", `<div class="main">\n` );
   wfs( `<h2>CMD4 Device Properties</h2>\n` );
   wfs( `<p>This auto generated document replaces the hard coded, impossible to maintain definitions in what was the State.js script and other locations.</p>\n` );

   for ( let index=0; index < CMD4_DEVICE_TYPE_ENUM.EOL; index ++)
   {
      let deviceName = CMD4_DEVICE_TYPE_ENUM.properties[ index ].deviceName;

      addSingleDeviceContent( index, deviceName );
   }

   endDiv( "main" );
}

function addCmd4DirectivePages_WithinContentDiv( )
{
   wf( "+", `<div class="main">\n` );

   wfs( `<h2>CMD4 Directives</h2>\n` );
   wfs( `<p>These directives appear within the "Cmd4" plugin header and reflect how Cmd4 will behave overall.</p>\n` );


   wf( "+", `<TABLE WIDTH="100%">\n` );
   wfs( `<TR ALIGN="left"><TH>Cmd4Directive<TH>Type<TH PADDING="50px">Default<TH>Description</TR>\n` );

   // outputConstants
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.OUTPUTCONSTANTS }_D">${ constants.OUTPUTCONSTANTS }</a><TD>  < Bool >  <TD>    false    <TD> If Cmd4 will send Strings like "TRUE" or "FALSE" instead of 0 | 1 </TR>\n` );

   // restartRecover
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.RESTART_RECOVER_l }_D"> ${ constants.RESTART_RECOVER_l }</a><TD> < Bool > <TD> true <TD> If Cmd4 will use previous cached state information </TR>\n` );

   wf( "-", `</TABLE>\n` );
   endDiv( "main" );

}

function addCmd4AccessoryDirectivePages_WithinContentDiv( )
{
   wf( "+", `<div class="main">\n` );

   wfs( `<h2><a name="CMD4 Accessory Directives">CMD4 Accessory Directives</a></h2>\n` );
   wfs( `<p>These directives appear within the characteristic section of the Cmd4 Accessory</p>\n` );

   wf( "+", `<TABLE WIDTH="100%" border: 1px solid black >\n` );
   wfs( `<TR cols="4" ALIGN="left"><TH>Cmd4Directive<TH>Type<TH PADDING="50px">Default<TH>Description</TR>\n` );

   // outputConstants
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.OUTPUTCONSTANTS }">${ constants.OUTPUTCONSTANTS }</a><TD>  < Bool >  <TD>    false    <TD> If Cmd4 will send Strings like "TRUE" or "FALSE" instead of 0 | 1 </TR>\n` );

   // publishExternally
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.PUBLISHEXTERNALLY }">${ constants.PUBLISHEXTERNALLY }</a><TD>  < Bool >  <TD>    false     <TD> Tell Homebridge to publish the device as its own bridge. </TR>\n` );

   // fetch
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.FETCH }">${ constants.FETCH }</a><TD> < "${ constants.FETCH_ALWAYS }" | "${ constants.FETCH_CACHED }" | "${ constants.FETCH_POLLED }" > <TD> "${ constants.FETCH_ALWAYS }" <TD> Tell Homebridge to publish the device as its own bridge.</TR>\n` );

   wfs( `<TR ALIGN="left"><TD COLSPAN=4>\n` );
   wfs( `   i.e.<BR>\n` );
   wfs( `   <UL>\n` );
   // fetch Always
   wfs( `      <LI> { "${constants.FETCH}": "<a name="${ constants.FETCH_ALWAYS }">${ constants.FETCH_ALWAYS }</a>" } - As before Always fetch characteristic value. ( Default )\n` );
   // fetch Cached
   wfs( `      <LI> { "${constants.FETCH}": "<a name="${ constants.FETCH_CACHED }">${ constants.FETCH_CACHED }</a>" } - Never fetch characteristic value. Use cached value. The cached value would have to be updated through polling.\n` );
   // fetch Polled
   wfs( `      <LI> { "${constants.FETCH}": "<a name="${ constants.FETCH_POLLED }">${ constants.FETCH_POLLED }</a>" } - Polled characteristics act like before  (Always). Non polled characteristic values are fetched from cache.\n` );
   wfs( `  </UL>\n` );
   wfs( `</TR>\n` );

   // stateChangeResponseTime
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.STATECHANGERESPONSETIME }">${ constants.STATECHANGERESPONSETIME }</a><TD> < seconds > <TD> 60 <TD> How long to wait between a Set and Get command.</TR>\n` );

   // timeout
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.TIMEOUT }">${ constants.TIMEOUT }</a><TD> < msec > <TD> <TD> How long before killing the state command.</TR>\n` );

   // polling
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.POLLING }">${ constants.POLLING }</a><TD> < Bool > <TD> false <TD> If the characteristics should be polled for state change.</TR>\n` );

   wfs( `<TR><TD><TD COLSPAN=3> or  [{"characteristic" < characteristic >, [ "interval": < sec >, "timeout": < msec > ] }] </TR>\n` );

   // state_cmd
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.STATE_CMD }">${ constants.STATE_CMD }</a><TD>  < ${ constants.STATE_CMD } > <TD> See Description <TD> The command used to Get/Set Device characteristic State.</TR>\n` );
   wfs( `<TR><TD COLSPAN="4">The ${ constants.STATE_CMD } represents the path to your script. Cmd4 appends the Get/Set shown.<BR>\n` );
   wfs( `${ constants.STATE_CMD } Get < DisplayName > < characteristic ><BR>\n` );
   wfs( `${ constants.STATE_CMD } Set < DisplayName > < characteristic > < value ></TD></TR>\n` );

   // state_cmd_prefix
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.STATE_CMD_PREFIX }">${ constants.STATE_CMD_PREFIX }</a><TD>  < String > <TD> <TD> A String prepended to the < ${ constants.STATE_CMD } >.</TR>\n` );

   // state_cmd_suffix
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.STATE_CMD_SUFFIX }">${ constants.STATE_CMD_SUFFIX }</a><TD> < String > <TD> <TD> A String appended to the < ${ constants.STATE_CMD } >.</TR>\n` );

   // props
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.PROPS }">${ constants.PROPS }</a><TD>  < Bool >  <TD>    false     <TD> A way to override Hap Characteristiic Properties<BR>\n` );
   wfs( `         Only used to set min/max temperatures, for instance:</TR>\n` );
   wfs( `<TR ALIGN="Left"><TD><TD COLSPAN=3>"${ constants.PROPS }" : { "CurrentTemperature": { "maxValue":100, "minValue": -100, "minStep": 0.1}}</TR>\n` );

   // category
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.CATEGORY }">${ constants.CATEGORY }</a><TD> < CATEGORY > <TD> undefined <TD> See <a href="https://developers.homebridge.io/#/categories">Homebridge Categories</a> for a complete list of possible categories.  </TR>\n` );

   // fakegato
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.FAKEGATO }">${ constants.FAKEGATO }</a><TD>  < JSON >  <TD> <TD> See the section, <a href="https://github.com/ztalbot2000/homebridge-cmd4/README.md#fakegatotag"> "Adding in Fakegato history"</a> below.</TR>\n` );

   // linkedTypes
   wfs( `<TR ALIGN="left"><TD><a name="${ constants.LINKEDTYPES }">${ constants.LINKEDTYPES }</a><TD>  < JSON >  <TD> <TD> Other Cmd4 Accessories like Input Source for HDMI inputs. </TR>\n` );


   wf( "-", `</TABLE>\n` );
   endDiv( "main" );

}



function addSingleDeviceContent(device_type_enum, deviceName )
{
   let definition = CMD4_DEVICE_TYPE_ENUM.properties[ device_type_enum ];
   let requiredCharacteristics = definition.requiredCharacteristics;
   let optionalCharacteristics = definition.optionalCharacteristics;
   let defaultPollingCharacteristics = definition.defaultPollingCharacteristics;

   // Start Div
   wf( "+", `<div class="Device">\n` );
   wfs( `<a name="${ deviceName }"></a>\n` );
   wfs( `<header><h1>${ deviceName }</h1></header>\n` );
   wfs( `<p>UUID:${ definition.UUID }</p>\n` );

   // Required Characteristics
   wfs( `<H3>Required Characteristics</H3>\n` );
   if ( requiredCharacteristics && requiredCharacteristics.length > 0 )
   {
      wf( "+", `<table>\n` );
      wfs( `<TD> </TD><TD> Default Value </TD><TD> Constant </TD>\n` );

      requiredCharacteristics.forEach( ( characteristic ) =>
      {
         // Look up the characteristic index given, to its string value
         let characteristicString = CMD4_ACC_TYPE_ENUM.properties[ characteristic.type ].type;
         let defaultValue = characteristic.defaultValue;

         let constant = transposeValueToValidConstant( log, CMD4_ACC_TYPE_ENUM.properties, characteristic.type, defaultValue );

         if ( constant == defaultValue )
            constant = "n/a";

         wfs( `<tr><Td><UL><LI><a href="#${ characteristicString }">${ characteristicString }</a></UL></TD><TD> ${ defaultValue } </TD><TD> ${ constant } </TD>\n` );
      });
      wf( "-", `</Table>\n` );
   }


   // Optional Characteristics
   wfs( `<H3>Optional Characteristics</H3>\n` );
   if ( optionalCharacteristics && optionalCharacteristics.length > 0 )
   {
      wf( "+", `<UL>\n` );
      optionalCharacteristics.forEach( ( characteristic ) =>
      {
         let characteristicString = CMD4_ACC_TYPE_ENUM.properties[ characteristic ].type;
        wfs( `<LI><a href="#${ characteristicString }">${ characteristicString }</a>\n` );
      });
      wf( "-", `</UL>\n` );
   }

   // Default Polling  Characteristics
   if ( defaultPollingCharacteristics && defaultPollingCharacteristics.length > 0 )
   {
      wfs( `<H3>Default Polling Characteristics</H3>\n` );
      wfs( `<note> Default polling characteristics are characteristics that would automatically be polled if Accessory Polling is configured ( polling:true ) instead of characteristic polling where each characteristic is set individually.\n` );
      wf( "+", `<UL>\n` );

      defaultPollingCharacteristics.forEach( ( characteristic ) =>
      {
         let characteristicString = CMD4_ACC_TYPE_ENUM.properties[ characteristic ].type;
         wfs( `<LI><a href="#${ characteristicString }">${ characteristicString }</a>\n` );
      });

      wf( "-", `</UL>\n` );
   }
   wfs( `<H3>Example config.json entry</H3>\n` );
   commaNeeded = true;

   // This is pre-formatted text
   wfs( `<pre>\n` );

   // The stuff in the brace will be indented
   wf( "+", `{\n` );
   wfs( `${ constants.TYPE }: ${ definition.deviceName },\n` );
   wfs( `${ constants.NAME }: "MY_${ definition.deviceName }",\n` );
   wfs( `${ constants.DISPLAYNAME }: "MY_${ definition.deviceName }"` );
   if ( requiredCharacteristics && requiredCharacteristics.length > 0 )
   {
      requiredCharacteristics.forEach( ( characteristic ) =>
      {
         let requiredDefinition = CMD4_ACC_TYPE_ENUM.properties[ characteristic.type ];
         if ( commaNeeded )
            w( `,\n` );

         // Look up the characteristic index given, to its string value
         let characteristicString = requiredDefinition.type;
         let defaultValue = characteristic.defaultValue;
         wfs( `${ characteristicString }: "${ defaultValue}"` );
      });
   }

   if ( optionalCharacteristics && optionalCharacteristics.length > 0 )
   {
      optionalCharacteristics.forEach( ( characteristic ) =>
      {
         let optionalDefinition = CMD4_ACC_TYPE_ENUM.properties[ characteristic ];
         let characteristicString = optionalDefinition.type;

         if ( optionalDefinition.type == CMD4_ACC_TYPE_ENUM.Name )
            return;

         // Do not show TLV8 characteristics
         let format = optionalDefinition.props.format;
         switch( format )
         {
            case Characteristic.Formats.TLV8:
               return;
            case Characteristic.Formats.INT:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < INT >` );
               break;
            case Characteristic.Formats.UINT8:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < UINT8 >` );
               break;
            case Characteristic.Formats.UINT16:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < UINT16 >` );
               break;
            case Characteristic.Formats.UINT32:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < UINT32 >` );
               break;
            case Characteristic.Formats.UINT64:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < UINT64 >` );
               break;
            case Characteristic.Formats.STRING:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: "< STRING> "` );
               break;
            case Characteristic.Formats.BOOL:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < BOOLEAN >` );
               break;
            case Characteristic.Formats.ARRAY:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < ARRAY >` );
               break;
            case Characteristic.Formats.DATA:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < DATA >` );
               break;
            case Characteristic.Formats.DICTIONARY:
               if ( commaNeeded ) w( `,\n` );
               wfs( `${ characteristicString }: < DICTIONARY >` );
               break;
            default:
               if ( commaNeeded ) w( `,\n` );
               wfs( `Unknown format ${ format }` );
         }
      });
   }

   if ( commaNeeded ) w( `,\n` );
      wfs( `<a href="#${ constants.STATE_CMD }">${ constants.STATE_CMD }</a>: < "STRING" >,\n` );
   wfs( `<a href="#${ constants.POLLING }">${ constants.POLLING }</a>: < POLLING>\n` );
   // The last carriage return before the close brace
   w( `\n` );

   // End of the indented stuff in the brace
   wf( "-", `}\n` );

   // End of pre-formatted text
   wfs( `</pre>\n` );

   wfs( `See additional <a href="#CMD4 Accessory Directives">CMD4 Accessory Directives</a>\n` );

   endDiv( "Device" );
}

function addAccPages_WithinContentDiv( )
{
   wf( "+", `<div class="main">\n` );
   wfs( `<h2>CMD4 Characteristic Properties</h2>\n` );
   wfs( `<p>This auto generated document replaces the hard coded, impossible to maintain definitions in what was the State.js script and other locations.</p>\n` );

   //
   // Add the characteristic content within the HTML body
   //
   for ( let index=0; index < CMD4_ACC_TYPE_ENUM.EOL; index ++)
   {
      let characteristic = CMD4_ACC_TYPE_ENUM.properties[ index ].type;

      addSingleAccContent( index, characteristic );

   }
   endDiv( "ACC Page" );
}


function addSingleAccContent( acc_type_enum, characteristic )
{
   let definition = CMD4_ACC_TYPE_ENUM.properties[ acc_type_enum ];
   let props = CMD4_ACC_TYPE_ENUM.properties[ acc_type_enum ].props;

   // Start Div
   wf( "+", `<div>\n` );
   wfs( `<a name="${ characteristic }"></a>\n` );
   wfs( `<header><h1>${ characteristic }</h1></header>\n` );
   wfs( `<h3>Properties</h3>\n` );
   wf( "+", 
      `<table>\n` );
   wfs( `<tr><TD> Type: </TD><TD> ${characteristic }</TD></tr>\n` );

   if ( definition.UUID )
      wfs( `<tr><TD> UUID: </TD><TD> ${definition.UUID }</TD></tr>\n` );

   if ( props.format )
      wfs( `<tr><TD> Format: </TD><TD> ${ props.format }</TD></tr>\n` );

   if ( props.unit )
      wfs( `<tr><TD> Unit: </TD><TD>  ${ props.unit }</TD></tr>\n` );

   if ( props.minValue )
      wfs( `<tr><TD> Min Value: </TD><TD>  ${ props.minValue }</TD></tr>\n` );

   if ( props.maxValue )
      wfs( `<tr><TD> Max Value: </TD><TD>  ${ props.maxValue }</TD></tr>\n` );

   if ( props.minStep )
      wfs( `<tr><TD> Min Step: </TD><TD>  ${ props.minStep }</TD></tr>\n` );

   if ( props.perms )
   {
      let output = "";
      let comma = "";
      props.perms.forEach( ( perm ) =>
      {
         switch( perm )
         {
            case "pr":
               output = output + comma + "Paired Read";
               commaNeeded = true;
               break;
            case "pw":
               output = output + comma + "Paired Write";
               commaNeeded = true;
               break;
            case "ev":
               output = output + comma + "Events";
               commaNeeded = true;
               break;
            case "tw":
               output = output + comma + "Timed Write";
               commaNeeded = true;
               break;
            case "wr":
               output = output + comma + "Write Response";
               commaNeeded = true;
               break;
            default:
               console.log( "Unknown perm: %s", perm );
               process.exit(333);
         }
         comma = ", ";
      });
      wfs( `<tr><TD> Perms: </TD><TD>  ${ output }</TD></tr>\n` );

   }
   wf( "-", `</table>\n` );

   // Constants definition Table
   let defs = Object.keys( definition.validValues );
   if ( defs.length > 0 )
   {
      wfs( `<h3>Constants</h3>\n` );
      wf( "+", `<table>\n` );
      wfs( `<TD> Value </TD><TD> String </TD>\n` );

      defs.forEach( ( def ) =>
      {
        wfs( `<tr><TD> ${ definition.validValues[ def ] } </TD><TD> "${ def }" </TD></tr>\n` );
      });

      wf( "-", `</table>\n` );
   }

   // Verify Chsracteristic Notes
   let verify = definition.verifyCharacteristic;
   if ( verify )
   {
      wfs( `<h4>Note:</h4>\n` );
      wfs( `<note>Setting this characteristic will automstically trigger a "Get" of the characteristic: <a href="#${ verify.name }">${ verify.name }</a></note>\n` );

   }

   endDiv( ); // Closing DIV of Characteristic

}
function endDiv( comment )
{
   let div = "</DIV>";
   if ( comment )
      div = div + `   <!-- ${comment} -->`;

   div = div + "\n";

   wf( "-" , div );
}

// Write to fid the given text, increasing or decreasing divLevel.
function wf( level, text )
{
   // Subtract now
   if ( level == "-" )
      divLevel--;

   fid.write( " ".repeat( divLevel * INDENT ).concat( text ) );

   // Add later 
   if (level == "+" )
      divLevel++;
}

// Convenience function for wfs. writing to same level.
function wfs( text )
{
   wf( "nc", text );
}
// Convenience function to write to fid, no formatting, as is.
function w( text )
{
   fid.write( text );
}

createHTMLCmd4AccDocument( );

if ( divLevel == 0)
{
   console.log( "Yahoo !  All lined up. " );
   return 0;
} else {
   console.log( "Booo ... alignment failed: %s", divLevel );
}
return divLevel;
